variables:
  AUTO_MESSAGE: "/^test/"
  AUTO_MESSAGE_NO_QUOTE: /^test/
  AUTO_MESSAGE_REG_CONTENT: ^test

Test gitlab rule inline:
  rules:
    - if: "$PRODUCTION"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /^test/
      when: on_success
    - when: manual
  script:
    - echo "${CI_JOB_NAME}"

Test gitlab rule inline (yoda):
  rules:
    - if: "$PRODUCTION"
      when: never
    - if: /^test/ =~ $CI_COMMIT_MESSAGE
      when: on_success
    - when: manual
  script:
    - echo "${CI_JOB_NAME}"

##

Test gitlab rule var:
  rules:
    - if: "$PRODUCTION"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ $AUTO_MESSAGE
      when: on_success
    - when: manual
  script:
    - echo "${CI_JOB_NAME}"

Test gitlab rule var (yoda):
  rules:
    - if: "$PRODUCTION"
      when: never
    - if: $AUTO_MESSAGE =~ $CI_COMMIT_MESSAGE
      when: on_success
    - when: manual
  script:
    - echo "${CI_JOB_NAME}"

##

Test gitlab rule var no quote:
  rules:
    - if: "$PRODUCTION"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ $AUTO_MESSAGE_NO_QUOTE
      when: on_success
    - when: manual
  script:
    - echo "${CI_JOB_NAME}"

Test gitlab rule var no quote (yoda):
  rules:
    - if: "$PRODUCTION"
      when: never
    - if: $AUTO_MESSAGE_NO_QUOTE =~ $CI_COMMIT_MESSAGE
      when: on_success
    - when: manual
  script:
    - echo "${CI_JOB_NAME}"

##

Test gitlab rule var no quote:
  rules:
    - if: "$PRODUCTION"
      when: never
    - if: $CI_COMMIT_MESSAGE  /$AUTO_MESSAGE_REG_CONTENT/
      when: on_success
    - when: manual
  script:
    - echo "${CI_JOB_NAME}"

Test gitlab rule var no quote (yoda):
  rules:
    - if: "$PRODUCTION"
      when: never
    - if: /$AUTO_MESSAGE_REG_CONTENT/ =~ $CI_COMMIT_MESSAGE
      when: on_success
    - when: manual
  script:
    - echo "${CI_JOB_NAME}"
# Test gitlab rule not match inline:
#   rules:
#     - if: "$PRODUCTION"
#       when: never
#     - if: /^teust/ =~ $CI_COMMIT_MESSAGE
#       when: on_success
#     - when: manual
#     script:
#       - echo "${CI_JOB_NAME}"
# review:
#   script:
#     - DYNAMIC_ENVIRONMENT_URL="$RANDOM.com"
#     - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
#   artifacts:
#     reports:
#       dotenv: deploy.env
#   environment:
#     name: $CI_COMMIT_REF_SLUG-dev2
#     url: $DYNAMIC_ENVIRONMENT_URL

# stop_review:
#   dependencies: [review]
#   stage: deploy
#   script:
#     - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL"
